# Source: http://ict.renevdmark.nl/2015/10/22/cisco-asa-alerts-and-kibana/
# TODO See also : http://www.gregmefford.com/blog/2014/09/24/analyzing-cisco-asa-firewall-logs-with-logstash/
input {
        tcp {
                port => 5016
                type => "cisco-asa"
        }
}
filter {
      # Extract fields from the each of the detailed message types
      # The patterns provided below are included in core of LogStash 1.4.2.
  grok {
        # TODO Mettre une variable pour ce chemin ansible
        patterns_dir => "/etc/logstash/patterns"
        match => [
                "message", "%{customCISCOFW302013_302014_302015_302016}",
		            "message", "%{customCISCOFW302020_302021}",
                "message", "%{customCISCOFW315011}",
		            "message", "%{CISCOFW106021}",
                "message", "%{CISCOFW106023}",
                "message", "%{CISCOFW106001}",
                "message", "%{CISCOFW106006_106007_106010}",
                "message", "%{CISCOFW106014}",
                "message", "%{customCISCOFW106015}",
                "message", "%{CISCOFW106100}",
                "message", "%{customCISCOFW110002}",
                "message", "%{CISCOFW302010}",
                "message", "%{CISCOFW305011}",
                "message", "%{CISCOFW313001_313004_313008}",
                "message", "%{customCISCOFW752004}",
		            "message", "%{customCISCOFW313005}",
                "message", "%{customCISCOFW752015}",
                "message", "%{customCISCOFW752010}",
                "message", "%{customCISCOFW713041}",
                "message", "%{customCISCOFW713903}",
		            "message", "%{CISCOFW402117}",
                "message", "%{CISCOFW402119}",
                "message", "%{CISCOFW419001}",
                "message", "%{CISCOFW419002}",
                "message", "%{CISCOFW500004}",
                "message", "%{CISCOFW602303_602304}",
                "message", "%{CISCOFW710001_710002_710003_710005_710006}",
                "message", "%{CISCOFW713172}",
                "message", "%{CISCOFW733100}",
                "message", "%{customCISCOFW304001}",
	              "message", "%{customCISCOFW713904}",
                "message", "%{customCISCOFW752012}",

			# Rare message handlers
		"message", "%{WORD:action} %{WORD:protocol} %{CISCO_REASON:reason} from %{DATA:src_interface}:%{IP:src_ip}/%{INT:src_port} to %{DATA:dst_interface}:%{IP:dst_ip}/%{INT:dst_port}; %{GREEDYDATA:dnssec_validation}",
		"message", "%{CISCO_ACTION:action} %{WORD:protocol} %{CISCO_REASON:reason}.*(%{IP:src_ip}).*%{IP:dst_ip} on interface %{GREEDYDATA:interface}",
		"message", "Connection limit exceeded %{INT:inuse_connections}/%{INT:connection_limit} for input packet from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} on interface %{GREEDYDATA:interface}",
		"message", "TCP Intercept %{DATA:threat_detection} to %{IP:ext_nat_ip}/%{INT:ext_nat_port}.*(%{IP:int_nat_ip}/%{INT:int_nat_port}).*Average rate of %{INT:syn_avg_rate} SYNs/sec exceeded the threshold of %{INT:syn_threshold}.#%{INT}",
		"message", "Embryonic connection limit exceeded %{INT:econns}/%{INT:limit} for %{WORD:direction} packet from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} on interface %{GREEDYDATA:interface}"
        ]
  }
  # Parse the syslog severity and facility
  syslog_pri { }
}
output {
  # If your elasticsearch server is discoverable with multicast, use this:
  # elasticsearch { }
  elasticsearch { hosts => "10.6.7.232:9200" }
}
