# TODO See also : http://www.gregmefford.com/blog/2014/09/24/analyzing-cisco-asa-firewall-logs-with-logstash/
# ftp://k12linux.mesd.k12.or.us/pub/K12LTSP/logstash/filters/asa.conf
input {
        tcp {
                port => 5016
                type => "cisco-asa"
        }
}
filter {
  if [type] == "cisco-asa" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns" ]
      match => [ "message", "%{cSYSLOG}"]
    }
    if [program] =~ "%ASA-6-30201[3456]" {
  		grok {
  			patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW302013_302014_302015_302016}" ]
      }
  	} elseif [program] =~ "%ASA-6-30202[01]" {
  		grok {
  			patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW302020_302021}" ]
  	  }
  	} elseif [program] =~ "%ASA-6-315011" {
  		grok {
  			patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW315011}" ]
  	  }
  	} elseif [program] =~ "%ASA-5-304001" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW304001}" ]
  	  }
  	} elseif [program] =~ "%ASA-4-106023" {
  		grok {
  			match => [ "program_message", "%{CISCOFW106023}" ]
  	  }
  	}  elseif [program] =~ "%ASA-6-106015" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW106015}" ]
  	  }
  	} elseif [program] =~ "%ASA-6-302010" {
  		grok {
  			match => [ "program_message", "%{CISCOFW302010}" ]
  	  }
  	} elseif [program] =~ "%ASA-3-31300[148]" {
  		grok {
  			match => [ "program_message", "%{CISCOFW313001_313004_313008}" ]
  	  }
  	} elseif [program] =~ "%ASA-5-752004" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW752004}" ]
  	  }
  	} elseif [program] =~ "%ASA-4-313005" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW313005}" ]
  	  }
  	} elseif [program] =~ "%ASA-3-752015" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW752015}" ]
  	  }
  	} elseif [program] =~ "%ASA-4-752010" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW752010}" ]
  	  }
  	}  elseif [program] =~ "%ASA-5-713041" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW713041}" ]
  	  }
  	}  elseif [program] =~ "%ASA-4-713903" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW713903}" ]
  	  }
  	} elseif [program] =~ "%ASA-4-419002" {
  		grok {
  			match => [ "program_message", "%{CISCOFW419002}" ]
  	  }
  	} elseif [program] =~ "%ASA-6-60230[34]" {
  		grok {
  			match => [ "program_message", "%{CISCOFW602303_602304}" ]
  	  }
  	} elseif [program] =~ "%ASA-3-71000[12356]" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{CISCOFW710001_710002_710003_710005_710006}" ]
  	  }
  	} elseif [program] =~ "%ASA-4-733100" {
  		grok {
  			match => [ "program_message", "%{CISCOFW733100}" ]
  	  }
  	} elseif [program] =~ "%ASA-5-304001" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW304001}" ]
  	  }
  	} elseif [program] =~ "%ASA-5-713904" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW713904}" ]
  	  }
  	} elseif [program] =~ "%ASA-4-752012" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW752012}" ]
  	  }
  	} elseif [program] =~ "%ASA-6-110002" {
  		grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
  			match => [ "program_message", "%{customCISCOFW110002}" ]
  	  }
  	}
    if "_grokparsefailure" not in [tags] {
      mutate {
         rename => [ "action", "flowtype" ]
         rename => [ "bytes", "bytes-from-server" ]
         rename => [ "drop_type", "flowtype" ]
         rename => [ "dst_interface", "destination-zone-name" ]
         rename => [ "dst_mapped_ip", "nat-destination-address" ]
         rename => [ "dst_mapped_port", "nat-destination-port" ]
         rename => [ "duration", "elapsed-time" ]
         rename => [ "icmp_code", "icmp-type" ]
         rename => [ "protocol", "protocol-id" ]
         rename => [ "src_interface", "packet-incoming-interface" ]
         rename => [ "src_ip", "source-address" ]
         rename => [ "src_port", "source-port" ]
         rename => [ "src_mapped_ip", "nat-source-address" ]
         rename => [ "src_mapped_port", "nat-source-port" ]
         convert => [ "bytes-from-server", "integer" ]
         remove_field => [ "program_message" ]
          }
      }
  }
}
output {
  # If your elasticsearch server is discoverable with multicast, use:
  # elasticsearch { }
  elasticsearch { hosts => "var_ELK_elasticsearch_ip:var_ELK_elasticsearch_port" }
}
